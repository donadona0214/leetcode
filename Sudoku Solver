/*
Write a program to solve a Sudoku puzzle by filling the empty cells.
Empty cells are indicated by the character '.'.
You may assume that there will be only one unique solution.

A sudoku puzzle is a grid of nine by nine squares or cells. 
The objective of sudoku is to enter a digit from 1 through 9 in each cell, in such a way that:
  Each horizontal row (shown in pink) contains each digit exactly once
  Each vertical column (shown in yellow) contains each digit exactly once
  Each subgrid or region (shown in green) contains each digit exactly once
*/

public class Solution {
    public void solveSudoku(char[][] board) {
        // Start typing your Java solution below
        // DO NOT write main() function
      
        if (board == null) return;
        int m = board.length;
        if (m == 0) return;
        int n = board[0].length;
        if (n == 0) return;
      
        solveSudokuHelper(board, m, n, 0, 0);
    }
  
    public boolean solveSudokuHelper(char[][] board, int m, int n, int i, int j) {
        if (j==n) {
            j = 0;
            i = i+1;
            if (i == m) return true;
        }
       
        if (board[i][j] != '.') return solveSudokuHelper(board, m, n, i, j+1);
       
        int len = 9;
        boolean[] hits = new boolean[len];

        for (int p=0; p<len; p++) {
            addHits(hits, board[i][p]);
            addHits(hits, board[p][j]);
            addHits(hits, board[i/3*3+p/3][j/3*3+p%3]);
        }
      
        for (int p=0; p<len; p++) {
            if (!hits[p]) {
                board[i][j] = (char) (p+'1');
                if (solveSudokuHelper(board, m, n, i, j+1)) return true;
            }
        }
        
        board[i][j] = '.';
        return false;
    }
  
    public void addHits(boolean[] hits, char c) {
        if (c != '.' && !hits[c-'1']) {
            hits[c-'1'] = true;          
        }
    }
}
